/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PasswordChangeContainer,
  PasswordResetContainer,
  UserContainer,
  UserMeta,
  UserPrincipal,
} from '../models/index';
import {
    PasswordChangeContainerFromJSON,
    PasswordChangeContainerToJSON,
    PasswordResetContainerFromJSON,
    PasswordResetContainerToJSON,
    UserContainerFromJSON,
    UserContainerToJSON,
    UserMetaFromJSON,
    UserMetaToJSON,
    UserPrincipalFromJSON,
    UserPrincipalToJSON,
} from '../models/index';

export interface ChangeUserPasswordRequest {
    passwordChangeContainer: PasswordChangeContainer;
}

export interface ResetPasswordRequest {
    email: string;
}

export interface SavePasswordRequest {
    passwordResetContainer: PasswordResetContainer;
}

export interface ShowChangePasswordPageRequest {
    token: string;
}

export interface SignUpRequest {
    password: string;
    userPrincipal: UserPrincipal;
}

export interface UpdateUserRequest {
    userMeta: UserMeta;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['passwordChangeContainer'] == null) {
            throw new runtime.RequiredError(
                'passwordChangeContainer',
                'Required parameter "passwordChangeContainer" was null or undefined when calling changeUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/updatePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeContainerToJSON(requestParameters['passwordChangeContainer']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.changeUserPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserContainer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/current-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserContainerFromJSON(jsonValue));
    }

    /**
     */
    async getUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserContainer> {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling resetPassword().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.resetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async savePasswordRaw(requestParameters: SavePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['passwordResetContainer'] == null) {
            throw new runtime.RequiredError(
                'passwordResetContainer',
                'Required parameter "passwordResetContainer" was null or undefined when calling savePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/savePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetContainerToJSON(requestParameters['passwordResetContainer']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async savePassword(requestParameters: SavePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.savePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async showChangePasswordPageRaw(requestParameters: ShowChangePasswordPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling showChangePasswordPage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/changePassword`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async showChangePasswordPage(requestParameters: ShowChangePasswordPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.showChangePasswordPageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async signUpRaw(requestParameters: SignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling signUp().'
            );
        }

        if (requestParameters['userPrincipal'] == null) {
            throw new runtime.RequiredError(
                'userPrincipal',
                'Required parameter "userPrincipal" was null or undefined when calling signUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup/{password}`.replace(`{${"password"}}`, encodeURIComponent(String(requestParameters['password']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserPrincipalToJSON(requestParameters['userPrincipal']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async signUp(requestParameters: SignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.signUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMeta>> {
        if (requestParameters['userMeta'] == null) {
            throw new runtime.RequiredError(
                'userMeta',
                'Required parameter "userMeta" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/update-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserMetaToJSON(requestParameters['userMeta']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMetaFromJSON(jsonValue));
    }

    /**
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMeta> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

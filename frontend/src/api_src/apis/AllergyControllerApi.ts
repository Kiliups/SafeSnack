/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Allergy,
} from '../models/index';
import {
    AllergyFromJSON,
    AllergyToJSON,
} from '../models/index';

export interface AssignAllergyRequest {
    allergy: Allergy;
}

export interface CreateAllergyRequest {
    allergy: Allergy;
}

export interface DeleteAllergyRequest {
    allergy: Allergy;
}

export interface RemoveAllergyRequest {
    allergy: Allergy;
}

export interface UpdateAllergyRequest {
    allergy: Allergy;
}

/**
 * 
 */
export class AllergyControllerApi extends runtime.BaseAPI {

    /**
     */
    async assignAllergyRaw(requestParameters: AssignAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['allergy'] == null) {
            throw new runtime.RequiredError(
                'allergy',
                'Required parameter "allergy" was null or undefined when calling assignAllergy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/allergy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllergyToJSON(requestParameters['allergy']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async assignAllergy(requestParameters: AssignAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.assignAllergyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createAllergyRaw(requestParameters: CreateAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['allergy'] == null) {
            throw new runtime.RequiredError(
                'allergy',
                'Required parameter "allergy" was null or undefined when calling createAllergy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/create-allergy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllergyToJSON(requestParameters['allergy']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createAllergy(requestParameters: CreateAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createAllergyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAllergyRaw(requestParameters: DeleteAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['allergy'] == null) {
            throw new runtime.RequiredError(
                'allergy',
                'Required parameter "allergy" was null or undefined when calling deleteAllergy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/delete-allergy`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AllergyToJSON(requestParameters['allergy']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteAllergy(requestParameters: DeleteAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteAllergyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllAllergiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Allergy>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allAllergies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AllergyFromJSON));
    }

    /**
     */
    async getAllAllergies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Allergy>> {
        const response = await this.getAllAllergiesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllergyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Allergy>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AllergyFromJSON));
    }

    /**
     */
    async getAllergy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Allergy>> {
        const response = await this.getAllergyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeAllergyRaw(requestParameters: RemoveAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['allergy'] == null) {
            throw new runtime.RequiredError(
                'allergy',
                'Required parameter "allergy" was null or undefined when calling removeAllergy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/allergy`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AllergyToJSON(requestParameters['allergy']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async removeAllergy(requestParameters: RemoveAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.removeAllergyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAllergyRaw(requestParameters: UpdateAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['allergy'] == null) {
            throw new runtime.RequiredError(
                'allergy',
                'Required parameter "allergy" was null or undefined when calling updateAllergy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/update-allergy`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AllergyToJSON(requestParameters['allergy']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateAllergy(requestParameters: UpdateAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateAllergyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAllergyListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateAllergyList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAllergyListRaw(initOverrides);
    }

}

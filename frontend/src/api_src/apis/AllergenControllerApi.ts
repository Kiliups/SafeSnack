/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Allergen,
} from '../models/index';

export interface CreateAllergenRequest {
    name: string;
}

export interface DeleteAllergenRequest {
    id: number;
}

export interface GetAllergenRequest {
    id: number;
}

export interface GetAllergenByAllergyRequest {
    allergyId: number;
}

export interface UpdateAllergenRequest {
    allergen: Allergen;
}

/**
 * 
 */
export class AllergenControllerApi extends runtime.BaseAPI {

    /**
     */
    async createAllergenRaw(requestParameters: CreateAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Allergen>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createAllergen().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async createAllergen(requestParameters: CreateAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Allergen> {
        const response = await this.createAllergenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAllergenRaw(requestParameters: DeleteAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAllergen().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergen`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteAllergen(requestParameters: DeleteAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteAllergenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllergenRaw(requestParameters: GetAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Allergen>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAllergen().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergen`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getAllergen(requestParameters: GetAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Allergen> {
        const response = await this.getAllergenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllergenByAllergyRaw(requestParameters: GetAllergenByAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Allergen>>> {
        if (requestParameters['allergyId'] == null) {
            throw new runtime.RequiredError(
                'allergyId',
                'Required parameter "allergyId" was null or undefined when calling getAllergenByAllergy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['allergyId'] != null) {
            queryParameters['allergyId'] = requestParameters['allergyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergen-by-allergy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getAllergenByAllergy(requestParameters: GetAllergenByAllergyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Allergen>> {
        const response = await this.getAllergenByAllergyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllergensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Allergen>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allergens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getAllergens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Allergen>> {
        const response = await this.getAllergensRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAllergenRaw(requestParameters: UpdateAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['allergen'] == null) {
            throw new runtime.RequiredError(
                'allergen',
                'Required parameter "allergen" was null or undefined when calling updateAllergen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/allergen`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['allergen'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateAllergen(requestParameters: UpdateAllergenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateAllergenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

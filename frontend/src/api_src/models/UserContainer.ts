/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserMeta } from './UserMeta';
import {
    UserMetaFromJSON,
    UserMetaFromJSONTyped,
    UserMetaToJSON,
    UserMetaToJSONTyped,
} from './UserMeta';
import type { Authority } from './Authority';
import {
    AuthorityFromJSON,
    AuthorityFromJSONTyped,
    AuthorityToJSON,
    AuthorityToJSONTyped,
} from './Authority';

/**
 * 
 * @export
 * @interface UserContainer
 */
export interface UserContainer {
    /**
     * 
     * @type {UserMeta}
     * @memberof UserContainer
     */
    user?: UserMeta;
    /**
     * 
     * @type {Array<Authority>}
     * @memberof UserContainer
     */
    roles?: Array<Authority>;
}

/**
 * Check if a given object implements the UserContainer interface.
 */
export function instanceOfUserContainer(value: object): value is UserContainer {
    return true;
}

export function UserContainerFromJSON(json: any): UserContainer {
    return UserContainerFromJSONTyped(json, false);
}

export function UserContainerFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserContainer {
    if (json == null) {
        return json;
    }
    return {
        
        'user': json['user'] == null ? undefined : UserMetaFromJSON(json['user']),
        'roles': json['roles'] == null ? undefined : ((json['roles'] as Array<any>).map(AuthorityFromJSON)),
    };
}

export function UserContainerToJSON(json: any): UserContainer {
    return UserContainerToJSONTyped(json, false);
}

export function UserContainerToJSONTyped(value?: UserContainer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': UserMetaToJSON(value['user']),
        'roles': value['roles'] == null ? undefined : ((value['roles'] as Array<any>).map(AuthorityToJSON)),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { Restaurant, RestaurantFromJSONTyped, RestaurantToJSON, RestaurantToJSONTyped } from './Restaurant';
import { UserMeta, UserMetaFromJSONTyped, UserMetaToJSON, UserMetaToJSONTyped } from './UserMeta';
/**
 * 
 * @export
 * @interface UserMetaBase
 */
export interface UserMetaBase {
    /**
     * 
     * @type {number}
     * @memberof UserMetaBase
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserMetaBase
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserMetaBase
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof UserMetaBase
     */
    email?: string;
}

/**
 * Check if a given object implements the UserMetaBase interface.
 */
export function instanceOfUserMetaBase(value: object): value is UserMetaBase {
    return true;
}

export function UserMetaBaseFromJSON(json: any): UserMetaBase {
    return UserMetaBaseFromJSONTyped(json, false);
}

export function UserMetaBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserMetaBase {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'Restaurant') {
            return RestaurantFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'UserMeta') {
            return UserMetaFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : json['type'],
        'email': json['email'] == null ? undefined : json['email'],
    };
}

export function UserMetaBaseToJSON(json: any): UserMetaBase {
    return UserMetaBaseToJSONTyped(json, false);
}

export function UserMetaBaseToJSONTyped(value?: UserMetaBase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['type']) {
            case 'Restaurant':
                return RestaurantToJSONTyped(value as Restaurant, ignoreDiscriminator);
            case 'UserMeta':
                return UserMetaToJSONTyped(value as UserMeta, ignoreDiscriminator);
            default:
                throw new Error(`No variant of UserMetaBase exists with 'type=${value['type']}'`);
        }
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
        'email': value['email'],
    };
}

